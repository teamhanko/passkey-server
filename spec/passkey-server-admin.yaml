openapi: 3.1.0
info:
  version: '1.2'
  title: passkey-server-admin
  summary: Admin API for Passkey Server
  description: 'Admin API for Hanko Passkey Server. Allows creation and configiration of tenants and api keys, '
  termsOfService: 'https://www.hanko.io/terms'
  contact:
    name: Hanko Dev Team
    url: 'https://www.hanko.io'
    email: developers@hanko.io
  license:
    url: 'https://www.gnu.org/licenses/gpl-3.0.de.html'
    name: GPLv3
servers:
  - url: 'http://{host}:8001/{path_prefix}'
    variables:
      host:
        default: localhost
      path_prefix:
        default: ''
paths:
  /tenants:
    get:
      summary: Get tenant list
      description: Get a list of all tenants
      operationId: get-admin-tenant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/tenant_list'
        '500':
          $ref: '#/components/responses/error'
      servers:
        - url: 'http://{host}:8001/{path_prefix}'
          variables:
            host:
              default: localhost
            path_prefix:
              default: ''
    post:
      summary: Create a tenant
      description: Create a new tenant
      operationId: post-admin-tenant
      requestBody:
        $ref: '#/components/requestBodies/create_tenant'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenant_api_key'
        '400':
          $ref: '#/components/responses/error'
        '500':
          $ref: '#/components/responses/error'
      servers:
        - url: 'http://{host}:8001/{path_prefix}'
          variables:
            host:
              default: localhost
            path_prefix:
              default: ''
  '/tenants/{tenant_id}':
    get:
      summary: Get a tenant
      description: Get detailed information about the tenant
      operationId: get-admin-tenant-tenant_id
      parameters:
        - $ref: '#/components/parameters/tenant_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenant'
        '400':
          $ref: '#/components/responses/error'
        '404':
          $ref: '#/components/responses/error'
        '500':
          $ref: '#/components/responses/error'
      servers:
        - url: 'http://{host}:8001/{path_prefix}'
          variables:
            host:
              default: localhost
            path_prefix:
              default: ''
    put:
      summary: Update tenant
      description: Update information of a tenant
      operationId: put-admin-tenant-tenant_id
      parameters:
        - $ref: '#/components/parameters/tenant_id'
      requestBody:
        $ref: '#/components/requestBodies/update_tenant'
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/error'
        '404':
          $ref: '#/components/responses/error'
        '500':
          $ref: '#/components/responses/error'
      servers:
        - url: 'http://{host}:8001/{path_prefix}'
          variables:
            host:
              default: localhost
            path_prefix:
              default: ''
    delete:
      summary: Delete tenant
      description: Remove a tenant
      operationId: delete-admin-tenant-tenant_id
      parameters:
        - $ref: '#/components/parameters/tenant_id'
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/error'
        '404':
          $ref: '#/components/responses/error'
        '500':
          $ref: '#/components/responses/error'
      servers:
        - url: 'http://{host}:8001/{path_prefix}'
          variables:
            host:
              default: localhost
            path_prefix:
              default: ''
  '/tenants/{tenant_id}/secrets/jwk':
    post:
      summary: Create JWK
      description: Creates a new JWT encryption key
      operationId: post-admin-tenant-tenant_id-secrets-jwk
      parameters:
        - $ref: '#/components/parameters/tenant_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/secret'
                description: The created secret
        '400':
          $ref: '#/components/responses/error'
        '404':
          $ref: '#/components/responses/error'
        '500':
          $ref: '#/components/responses/error'
      servers:
        - url: 'http://{host}:8001/{path_prefix}'
          variables:
            host:
              default: localhost
            path_prefix:
              default: ''
    get:
      summary: List JWKs
      description: Get all JWKs as list
      operationId: get-path_prefix-tenants-tenant_id-secrets-jwk
      parameters:
        - $ref: '#/components/parameters/tenant_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/secret_list'
        '400':
          $ref: '#/components/responses/error'
        '404':
          $ref: '#/components/responses/error'
        '500':
          $ref: '#/components/responses/error'
      servers:
        - url: 'http://{host}:8001/{path_prefix}'
          variables:
            host:
              default: localhost
            path_prefix:
              default: ''
  '/tenants/{tenant_id}/secrets/api':
    post:
      summary: Create API key
      description: Creates a new API key
      operationId: post-admin-tenant-tenant_id-secrets-api
      parameters:
        - $ref: '#/components/parameters/tenant_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/secret'
                description: The created secret
        '400':
          $ref: '#/components/responses/error'
        '404':
          $ref: '#/components/responses/error'
        '500':
          $ref: '#/components/responses/error'
      servers:
        - url: 'http://{host}:8001/{path_prefix}'
          variables:
            host:
              default: localhost
            path_prefix:
              default: ''
    get:
      summary: List API keys
      description: Get all API keys as list
      operationId: get-path_prefix-tenants-tenant_id-secrets-api
      parameters:
        - $ref: '#/components/parameters/tenant_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/secret_list'
        '400':
          $ref: '#/components/responses/error'
        '404':
          $ref: '#/components/responses/error'
        '500':
          $ref: '#/components/responses/error'
      servers:
        - url: 'http://{host}:8001/{path_prefix}'
          variables:
            host:
              default: localhost
            path_prefix:
              default: ''
  '/tenants/{tenant_id}/secrets/jwk/{secret_id}':
    delete:
      summary: Remove JWK
      description: Remove a JWK
      operationId: delete-admin-tenant-tenant_id-secrets-jwk-secret_id
      parameters:
        - $ref: '#/components/parameters/tenant_id'
        - $ref: '#/components/parameters/secret_id'
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/error'
        '404':
          $ref: '#/components/responses/error'
        '500':
          $ref: '#/components/responses/error'
      servers:
        - url: 'http://{host}:8001/{path_prefix}'
          variables:
            host:
              default: localhost
            path_prefix:
              default: ''
  '/tenants/{tenant_id}/secrets/api/{secret_id}':
    delete:
      summary: Remove API key
      description: Remove an API key
      operationId: delete-admin-tenant-tenant_id-secrets-api-secret-id
      parameters:
        - $ref: '#/components/parameters/tenant_id'
        - $ref: '#/components/parameters/secret_id'
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/error'
        '404':
          $ref: '#/components/responses/error'
        '500':
          $ref: '#/components/responses/error'
      servers:
        - url: 'http://{host}:8001/{path_prefix}'
          variables:
            host:
              default: localhost
            path_prefix:
              default: ''
  '/tenants/{tenant_id}/config':
    put:
      summary: Update config
      description: Update config
      operationId: put-admin-tenant-tenant_id-config
      parameters:
        - $ref: '#/components/parameters/tenant_id'
      requestBody:
        $ref: '#/components/requestBodies/update_config'
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/error'
        '404':
          $ref: '#/components/responses/error'
        '500':
          $ref: '#/components/responses/error'
      servers:
        - url: 'http://{host}:8001/{path_prefix}'
          variables:
            host:
              default: localhost
            path_prefix:
              default: ''
  '/tenants/{tenant_id}/audit_logs':
    get:
      summary: List audit log entries
      description: Get a list of audit logs for a specific tenant
      operationId: get-tenants-tenant_id-audit_logs
      parameters:
        - name: page
          in: query
          description: Page to start from
          schema:
            type: number
            default: 1
        - name: per_page
          in: query
          description: How many logs should be displayed per page
          schema:
            type: number
            default: 20
        - name: start_time
          in: query
          description: timestamp from where to start the list
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          description: timestamp on which to end the list
          schema:
            type: string
            format: date-time
        - name: type
          in: query
          description: comma separated list of types to query for
          schema:
            type: string
        - name: actor_user_id
          in: query
          description: id of the user who performed the action
          schema:
            type: string
        - name: meta_source_ip
          in: query
          description: ip address from which the action was performed
          schema:
            type: string
        - name: q
          in: query
          description: the search string
          schema:
            type: string
        - $ref: '#/components/parameters/tenant_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/audit_log'
          headers:
            Link:
              schema:
                type: string
              description: links to pages
            X-Total-Count:
              schema:
                type: number
              description: Total number of log entries
        '400':
          $ref: '#/components/responses/error'
        '500':
          $ref: '#/components/responses/error'
      servers:
        - url: 'http://{host}:8001/{path_prefix}'
          variables:
            host:
              default: localhost
            path_prefix:
              default: ''
  '/tenants/{tenant_id}/users':
    get:
      summary: List Users
      description: Lists all webauthn users for a given tenant.
      operationId: get-tenants-tenant_id-users
      parameters:
        - name: page
          in: query
          description: Page of user list
          schema:
            type: number
            default: 1
        - name: per_page
          in: query
          description: How many entries should be shown per page
          schema:
            type: number
            default: 20
        - name: sort_direction
          in: query
          description: Sort entries ascending or descending
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: tenant_id
          in: path
          description: ID of the tenant for which the users will be listed.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of webauthn users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/webauthn_user'
        '400':
          $ref: '#/components/responses/error'
        '404':
          $ref: '#/components/responses/error'
        '500':
          $ref: '#/components/responses/error'
      servers:
        - url: 'http://{host}:8001/{path_prefix}'
          variables:
            host:
              default: localhost
            path_prefix:
              default: ''
  /health/alive:
    get:
      summary: Get alive status
      description: Checks if the API is alive
      operationId: get-health
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  alive:
                    type: boolean
                required:
                  - alive
      servers:
        - url: 'http://{host}:8001/{path_prefix}'
          variables:
            host:
              default: localhost
            path_prefix:
              default: ''
  /health/ready:
    get:
      summary: Get ready status
      description: Checks if the API is ready for usage
      operationId: get-health-ready
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ready:
                    type: boolean
                required:
                  - ready
      servers:
        - url: 'http://{host}:8001/{path_prefix}'
          variables:
            host:
              default: localhost
            path_prefix:
              default: ''
  '/tenants/{tenant_id}/users/{user_id}':
    get:
      summary: Get single user
      description: Get a detailed user object for a single user.
      operationId: get-tenants-tenant_id-users-user_id
      parameters:
        - name: tenant_id
          in: path
          description: ID of the tenant
          required: true
          schema:
            type: string
        - name: user_id
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Detailed user object for a single user.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/webauthn_user'
                  - type: object
                    properties:
                      credentials:
                        type: array
                        items:
                          $ref: '#/components/schemas/credential'
                      transactions:
                        type: array
                        items:
                          $ref: '#/components/schemas/transaction'
                    required:
                      - credentials
                      - transactions
        '400':
          $ref: '#/components/responses/error'
        '404':
          $ref: '#/components/responses/error'
        '500':
          $ref: '#/components/responses/error'
      servers:
        - url: 'http://{host}:8001/{path_prefix}'
          variables:
            host:
              default: localhost
            path_prefix:
              default: ''
    delete:
      summary: Remove single user
      description: Removes a single webauthn user
      operationId: delete-tenants-tenant_id-users-user_id
      parameters:
        - name: tenant_id
          in: path
          description: ID of the tenant
          required: true
          schema:
            type: string
        - name: user_id
          in: path
          description: ID of the user.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/error'
        '404':
          $ref: '#/components/responses/error'
        '500':
          $ref: '#/components/responses/error'
      servers:
        - url: 'http://{host}:8001/{path_prefix}'
          variables:
            host:
              default: localhost
            path_prefix:
              default: ''
tags:
  - name: admin api
    description: Hanko Passkey Server Admin API
components:
  parameters:
    tenant_id:
      name: tenant_id
      in: path
      description: UUID of the tenant
      required: true
      schema:
        type: string
        format: uuid
        minLength: 36
        maxLength: 36
        example:
          - 1f496bcd-49da-4839-a02f-7ce681ccb488
    secret_id:
      name: secret_id
      in: path
      description: UUID of a secret
      required: true
      schema:
        type: string
        format: uuid
        minLength: 36
        maxLength: 36
  requestBodies:
    create_tenant:
      content:
        application/json:
          schema:
            type: object
            properties:
              display_name:
                type: string
              config:
                $ref: '#/components/schemas/config'
              create_api_key:
                type: boolean
            required:
              - display_name
    update_tenant:
      content:
        application/json:
          schema:
            type: object
            properties:
              display_name:
                type: string
            required:
              - display_name
    update_config:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/config'
  responses:
    error:

      description: Error Response with detailed information
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type:
                  - string
                  - 'null'
                example:
                  - explanatory title
              details:
                type:
                  - string
                  - 'null'
                example:
                  - Information which helps resolving the problem
              status:
                type:
                  - integer
                  - 'null'
              additional:
                type:
                  - object
                  - 'null'
  schemas:
    tenant_list:
      type: object
      title: tenant_list
      properties:
        id:
          type: string
          format: uuid
          maxLength: 36
        display_name:
          type: string
      required:
        - id
        - display_name
    tenant_api_key:
      type: object
      title: tenant_api_key
      properties:
        id:
          type: string
          format: uuid
          minLength: 36
          maxLength: 36
        api_key:
          $ref: '#/components/schemas/secret'
          description: omitted when `create_api_key`is omitted or set to `false`
      required:
        - id
    secret:
      type: object
      title: secret
      description: Entiy Model of a secret
      properties:
        id:
          type: string
          format: uuid
          minLength: 36
          maxLength: 36
        name:
          type: string
        secret:
          type: string
          minLength: 36
        created_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - secret
        - created_at
    tenant:
      title: tenant
      allOf:
        - type: object
          properties:
            config:
              $ref: '#/components/schemas/config'
          required:
            - config
          minProperties: 3
          maxProperties: 3
        - $ref: '#/components/schemas/tenant_list'
    config:
      type: object
      title: config
      properties:
        cors:
          $ref: '#/components/schemas/cors'
        webauthn:
          $ref: '#/components/schemas/webauthn'
        mfa:
          $ref: '#/components/schemas/mfa'
      required:
        - cors
        - webauthn
    cors:
      type: object
      title: cors
      properties:
        allowed_origins:
          type: array
          minItems: 1
          items:
            type: string
            example:
              - '*.example.local'
        allow_unsafe_wildcard:
          type: boolean
          default: false
      required:
        - allowed_origins
        - allow_unsafe_wildcard
    webauthn:
      type: object
      title: webauthn
      properties:
        relying_party:
          $ref: '#/components/schemas/relying_party'
        timeout:
          type: number
          default: 60000
          example:
            - 60000
        user_verification:
          type: string
          enum:
            - required
            - preferred
            - discouraged
          description: defaults to `required` when omitted
        attachment:
          type: string
          enum:
            - platform
            - cross-platform
          description: uses all authenticator attachments when omitted
        attestation_preference:
          type: string
          enum:
            - none
            - indirect
            - direct
            - enterprise
          description: defaults to `direct` when omitted
        resident_key_requirement:
          type: string
          enum:
            - discouraged
            - preferred
            - required
          description: defaults to `required` when omitted
      required:
        - relying_party
        - timeout
    relying_party:
      type: object
      title: relying_party
      description: Relying Party part of config
      properties:
        id:
          type: string
          default: localhost
          example:
            - localhost
        display_name:
          type: string
          default: Hanko Passkey Server
          example:
            - Hanko Passkey Server
        icon:
          type: string
          format: uri
          example:
            - 'http://link.to/icon'
        origins:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            type: string
      required:
        - id
        - display_name
        - origins
    mfa:
      type: object
      title: mfa
      properties:
        timeout:
          type: number
          default: 60000
        user_verification:
          type: string
          enum:
            - required
            - preferred
            - discouraged
          description: defaults to `preferred` when omitted
        attachment:
          type: string
          enum:
            - platform
            - cross-platform
          description: defaults to `cross-platform` when omitted
        attestation_preference:
          type: string
          enum:
            - none
            - indirect
            - direct
            - enterprise
          description: defaults to `direct` when omitted
        resident_key_requirement:
          type: string
          enum:
            - discouraged
            - preferred
            - required
          description: defaults to `discouraged` when omitted
      required:
        - timeout
    secret_list:
      type: array
      title: secret_list
      uniqueItems: true
      items:
        $ref: '#/components/schemas/secret'
    audit_log:
      type: object
      title: audit_log
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
        error:
          type: string
        meta_http_request_id:
          type: string
        meta_source_ip:
          type: string
        meta_user_agent:
          type: string
        actor_user_id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        tenant_id:
          type: string
          format: uuid
      required:
        - id
        - type
        - meta_http_request_id
        - meta_source_ip
        - meta_user_agent
        - created_at
        - updated_at
        - tenant_id
    webauthn_user:
      type: object
      title: webauthn_user
      properties:
        id:
          type: string
        user_id:
          type: string
        name:
          type: string
        icon:
          type: string
        display_name:
          type: string
      required:
        - id
        - user_id
        - name
        - icon
        - display_name
    credential:
      type: object
      title: credential
      properties:
        id:
          type: string
        name:
          type: string
        public_key:
          type: string
        attestation_type:
          type: string
        aaguid:
          type: string
        last_used_at:
          type: string
        created_at:
          type: string
        transports:
          type: array
          items:
            type: string
        backup_eligible:
          type: boolean
        backup_state:
          type: boolean
      required:
        - id
        - public_key
        - attestation_type
        - aaguid
        - created_at
        - transports
        - backup_eligible
        - backup_state
    transaction:
      type: object
      title: transaction
      properties:
        id:
          type: string
        identifier:
          type: string
        data:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
      required:
        - id
        - identifier
        - data
        - created_at
        - updated_at
